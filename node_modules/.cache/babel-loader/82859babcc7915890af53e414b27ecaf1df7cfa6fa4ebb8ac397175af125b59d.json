{"ast":null,"code":"export async function callGeminiAPI(prompt) {\n  const apiKey = \"\"; // API Anahtarınızı buraya ekleyin veya bir ortam değişkeninden alın\n  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n  const payload = {\n    contents: [{\n      role: \"user\",\n      parts: [{\n        text: prompt\n      }]\n    }]\n  };\n  try {\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    if (!response.ok) {\n      const errorBody = await response.text();\n      throw new Error(`API çağrısı başarısız oldu: ${response.status} - ${errorBody}`);\n    }\n    const result = await response.json();\n    if (result.candidates && result.candidates.length > 0) {\n      return result.candidates[0].content.parts[0].text;\n    } else {\n      return \"Yapay zekadan geçerli bir yanıt alınamadı.\";\n    }\n  } catch (error) {\n    console.error(\"Gemini API hatası:\", error);\n    return \"Yapay zeka ile iletişim kurarken bir hata oluştu. Lütfen API anahtarınızın geçerli olduğundan emin olun ve tekrar deneyin.\";\n  }\n}","map":{"version":3,"names":["callGeminiAPI","prompt","apiKey","apiUrl","payload","contents","role","parts","text","response","fetch","method","headers","body","JSON","stringify","ok","errorBody","Error","status","result","json","candidates","length","content","error","console"],"sources":["C:/Users/USER/OneDrive/Masaüstü/parfum-atolyesi/src/api/gemini.js"],"sourcesContent":["export async function callGeminiAPI(prompt) {\r\n    const apiKey = \"\"; // API Anahtarınızı buraya ekleyin veya bir ortam değişkeninden alın\r\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n    const payload = { contents: [{ role: \"user\", parts: [{ text: prompt }] }] };\r\n\r\n    try {\r\n        const response = await fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        });\r\n        if (!response.ok) {\r\n            const errorBody = await response.text();\r\n            throw new Error(`API çağrısı başarısız oldu: ${response.status} - ${errorBody}`);\r\n        }\r\n        const result = await response.json();\r\n        if (result.candidates && result.candidates.length > 0) {\r\n            return result.candidates[0].content.parts[0].text;\r\n        } else {\r\n            return \"Yapay zekadan geçerli bir yanıt alınamadı.\";\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Gemini API hatası:\", error);\r\n        return \"Yapay zeka ile iletişim kurarken bir hata oluştu. Lütfen API anahtarınızın geçerli olduğundan emin olun ve tekrar deneyin.\";\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,aAAaA,CAACC,MAAM,EAAE;EACxC,MAAMC,MAAM,GAAG,EAAE,CAAC,CAAC;EACnB,MAAMC,MAAM,GAAG,gGAAgGD,MAAM,EAAE;EACvH,MAAME,OAAO,GAAG;IAAEC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE,CAAC;QAAEC,IAAI,EAAEP;MAAO,CAAC;IAAE,CAAC;EAAE,CAAC;EAE3E,IAAI;IACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACP,MAAM,EAAE;MACjCQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,OAAO;IAChC,CAAC,CAAC;IACF,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACD,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIU,KAAK,CAAC,+BAA+BT,QAAQ,CAACU,MAAM,MAAMF,SAAS,EAAE,CAAC;IACpF;IACA,MAAMG,MAAM,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IACpC,IAAID,MAAM,CAACE,UAAU,IAAIF,MAAM,CAACE,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MACnD,OAAOH,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAACjB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IACrD,CAAC,MAAM;MACH,OAAO,4CAA4C;IACvD;EACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,OAAO,4HAA4H;EACvI;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}